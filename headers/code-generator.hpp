// #######################################
// ## 
// ## @author: Estenio Garcia
// ## @copyright: (c) Allright reserved 
// ## @License: Apache 2.0
// ## 
// #######################################

#pragma once

#include <vector>
#include <string>
#include <fstream>
#include <filesystem>
#include "../models/ast.hpp"
#include "../headers/output.hpp"

class CodeGenerator
{
    private:
        const std::string COMMENTARY              = "// # Code generated by Elang Compiler\n";
        const std::string LICENSE                 = "// # Licensed under Apache 2.0\n";
        const std::string INCLUDES                = "#include<bits/stdc++.h>\n";
        const std::string LIBRARY_LANG_1          = "std::string floatToStr(float __elang_param){return std::to_string(__elang_param);}";
        const std::string LIBRARY_LANG_2          = "std::string intToStr(int __elang_param){return std::to_string(__elang_param);}\n";
        const std::string LIBRARY_LANG_3          = "std::string boolToStr(bool __elang_param){return (__elang_param==false) ? \"false\" : \"true\";}\n";
        const std::string LIBRARY_LANG_4          = "int floatToInt(float __elang_param){return static_cast<int>(__elang_param);}";
        const std::string LIBRARY_LANG_5          = "float intToFloat(int __elang_param){return static_cast<float>(__elang_param);}\n";
        const std::string LIBRARY_LANG_6          = "int strToInt(std::string __elang_param){if(__elang_param.empty()){std::cerr<<\"\\nData Format error: cannot convert empty string to integer\\n\";exit(EXIT_FAILURE);}return std::stoi(__elang_param);}\n";
        const std::string LIBRARY_LANG_7          = "float strToFloat(std::string __elang_param){if(__elang_param.empty()){std::cerr<<\"\\nData Format error: cannot convert empty string to float\\n\";exit(EXIT_FAILURE);}return std::stof(__elang_param);}\n";
        const std::string LIBRARY_LANG_8          = "bool strToBool(std::string __elang_param){if(__elang_param.empty()){std::cerr<<\"\\nData Format error: cannot convert empty string to boolean\\n\";exit(EXIT_FAILURE);}return (__elang_param==\"false\"||__elang_param==\"0\") ? false : true;}\n";
        const std::string LIBRARY_LANG_9          = "int charToInt(char __elang_param){return static_cast<int>(__elang_param);}";
        const std::string LIBRARY_LANG_10         = "std::string charToStr(char __elang_param){return std::string{__elang_param};}\n";
        const std::string LIBRARY_LANG_11         = "int syscmd(std::string __elang_param){return system(__elang_param.c_str());}";
        const std::string LIBRARY_LANG_12         = "void print(std::string __elang_param){std::cout<<__elang_param;}\n";
        const std::string LIBRARY_LANG_13         = "std::string readLine(){std::string __elang_line;std::getline(std::cin, __elang_line);return __elang_line;}";
        const std::string LIBRARY_LANG_14         = "char readKey(){char __elang_key;std::cin>>__elang_key;return __elang_key;}\n";
        const std::string GLOBAL_VARAIBLES        = "class __elang_class_runnable_cxx{private:";
        const std::string PROGRAM_INTERFACE       = "public:__elang_class_runnable_cxx();~__elang_class_runnable_cxx();public:void __elang_run_body_cxx();private:";
        const std::string CLOSE_PROGRAM_INTERFACE = "};\n";
        const std::string PROGRAM_RUNNABLE        = "__elang_class_runnable_cxx::__elang_class_runnable_cxx(){}__elang_class_runnable_cxx::~__elang_class_runnable_cxx(){}void __elang_class_runnable_cxx::__elang_run_body_cxx(){";
        const std::string CLOSE_PROGRAM_RUNNABLE  = "}\n";
        const std::string PROGRAM_BOOTSTRAP       = "int main(int argc, char* argv[]){auto startup=new __elang_class_runnable_cxx();startup->__elang_run_body_cxx();return EXIT_SUCCESS;}";
        const std::string STANDARD_PROGRAM_NAME   = "__elang_class_runnable_cxx::";

    private:
        std::vector<std::string> FunctionInterface;
        std::vector<std::string> FunctionImplementation;
        std::vector<std::string> RunnableImplementation;
        std::vector<std::string> GlobalVariables;

    private:
        std::string OutputFileName = "elcout.cpp";
        std::fstream fileHandler;

    public:
        CodeGenerator(std::string OutputFileName);
        ~CodeGenerator();

    public:
        void Run(Ast* ast);

    private:
        void DeleteExistsFile();

    private:
        void LoadProgramInitialize();
        void WriteChunkToFile(std::string chunk);
        void FlushFunctionInterfaceToFile();
        void FlushFunctionImplementationToFile();
        void FlushRunnableImplementationToFile();
        void FlushGlobalDeclarationToFile();

    private:
        void AstVisitor(Ast* ast);
        void GenerateFunction(AstBranch* branch);
        void GenerateVaraibleDeclaration(AstBranch* branch);
};