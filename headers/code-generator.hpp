// #######################################
// ## 
// ## @author: Estenio Garcia
// ## @copyright: (c) Allright reserved 
// ## @License: Apache 2.0
// ## 
// #######################################

#pragma once

#include <vector>
#include <string>
#include <fstream>
#include <filesystem>
#include "../models/ast.hpp"
#include "../headers/output.hpp"

class CodeGenerator
{
    private:
        const std::string COMMENTARY              = "// # Code generated by Elang Compiler\n";
        const std::string INCLUDES                = "#include<bits/stdc++.h>\n";
        const std::string PROGRAM_INTERFACE       = "class ProgramLoader{public:ProgramLoader();~ProgramLoader();public:void Run();private:";
        const std::string CLOSE_PROGRAM_INTERFACE = "};\n";
        const std::string PROGRAM_RUNNABLE        = "ProgramLoader::ProgramLoader(){}ProgramLoader::~ProgramLoader(){}void ProgramLoader::Run(){";
        const std::string CLOSE_PROGRAM_RUNNABLE  = "}\n";
        const std::string PROGRAM_BOOTSTRAP       = "int main(int argc, char* argv[]){auto startup=new ProgramLoader();startup->Run();return EXIT_SUCCESS;}";
        const std::string STANDARD_PROGRAM_NAME   = "ProgramLoader::";

    private:
        std::vector<std::string> FunctionInterface;
        std::vector<std::string> FunctionImplementation;
        std::vector<std::string> RunnableImplementation;

    private:
        std::string OutputFileName = "MyApplication.cpp";
        std::fstream fileHandler;

    public:
        CodeGenerator();
        ~CodeGenerator();

    public:
        void Run(Ast* ast);

    

    private:
        void LoadProgramInitialize();
        void WriteChunkToFile(std::string chunk);
        void FlushFunctionInterfaceToFile();
        void FlushFunctionImplementationToFile();
        void FlushRunnableImplementationToFile();
};