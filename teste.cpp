// # Code generated by Elang Compiler
// # Licensed under Apache 2.0
#include<bits/stdc++.h>
std::string floatToStr(float __elang_param){return std::to_string(__elang_param);}std::string intToStr(int __elang_param){return std::to_string(__elang_param);}
std::string boolToStr(bool __elang_param){return (__elang_param==false) ? "false" : "true";}
int floatToInt(float __elang_param){return static_cast<int>(__elang_param);}float intToFloat(int __elang_param){return static_cast<float>(__elang_param);}
int strToInt(std::string __elang_param){if(__elang_param.empty()){std::cerr<<"\nData Format error: cannot convert empty string to integer\n";exit(EXIT_FAILURE);}return std::stoi(__elang_param);}
float strToFloat(std::string __elang_param){if(__elang_param.empty()){std::cerr<<"\nData Format error: cannot convert empty string to float\n";exit(EXIT_FAILURE);}return std::stof(__elang_param);}
bool strToBool(std::string __elang_param){if(__elang_param.empty()){std::cerr<<"\nData Format error: cannot convert empty string to boolean\n";exit(EXIT_FAILURE);}return (__elang_param=="false"||__elang_param=="0") ? false : true;}
int charToInt(char __elang_param){return static_cast<int>(__elang_param);}std::string charToStr(char __elang_param){return std::string{__elang_param};}
int syscmd(std::string __elang_param){return system(__elang_param.c_str());}void print(std::string __elang_param){std::cout<<__elang_param;}
std::string readLine(){std::string __elang_line;std::getline(std::cin, __elang_line);return __elang_line;}char readKey(){char __elang_key;std::cin>>__elang_key;return __elang_key;}
class __elang_class_runnable_cxx{private:int t=sum(10,10);public:__elang_class_runnable_cxx();~__elang_class_runnable_cxx();public:void __elang_run_body_cxx();private:int sum(int n1,int n2);};
__elang_class_runnable_cxx::__elang_class_runnable_cxx(){}__elang_class_runnable_cxx::~__elang_class_runnable_cxx(){}void __elang_class_runnable_cxx::__elang_run_body_cxx(){print("Debug: "+intToStr(t)+"\n");}
int __elang_class_runnable_cxx::sum(int n1,int n2){return n1+n1;}
int main(int argc, char* argv[]){auto startup=new __elang_class_runnable_cxx();startup->__elang_run_body_cxx();return EXIT_SUCCESS;}